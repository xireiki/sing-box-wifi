#!/system/bin/sh

################################
# Name: 神秘控制器
# Author: Github@xireiki
# Version: 1.0.0
################################

export PATH="/data/adb/magisk:/data/adb/ksu/bin:$PATH:/data/data/com.termux/files/usr/bin"

if [[ -z "${lang}" ]]; then
  lang="en_US"
fi
if [[ -z "${bin_name}" ]]; then
  bin_name="singBox"
fi
tproxy_port="1536"
if [[ -z "${ipv6}" ]]; then
  ipv6="disable"
fi

proxy_mode="blacklist"
# blacklist / whitelist

user_packages_list=()
# Android User:Package Name, For example:
# user_packages_list=("0:com.android.captiveportallogin" "10:com.tencent.mm")

ap_list=("wlan+" "ap+" "rndis+")
ignore_out_list=()
fake_ip_range="198.18.0.0/15"

id="222"
routing_mark="233"
# sing-box route.default_mark

intranet=(0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/16 192.0.0.0/24 192.0.2.0/24 192.88.99.0/24 192.168.0.0/16 198.51.100.0/24 203.0.113.0/24 224.0.0.0/4 240.0.0.0/4 255.255.255.255/32)
intranet6=(::/128 ::1/128 ::ffff:0:0/96 100::/64 64:ff9b::/96 2001::/32 2001:10::/28 2001:20::/28 2001:db8::/32 2002::/16 fe80::/10 ff00::/8)

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
  case $1 in
    Info)
      [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2"
      ;;
    Warn)
      [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2"
      ;;
    Error)
      [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2"
      ;;
    *)
      [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
      ;;
  esac
}

uid_list=()
find_packages_uid() {
  for user_package in ${user_packages_list[@]} ; do
    user=$(echo ${user_package} | awk -F ':' '{print $1}')
    package=$(echo ${user_package} | awk -F ':' '{print $2}')
    uid_list[${#uid_list[@]}]=$(expr ${user} \* "100000" + $(cat /data/system/packages.list | grep ${package} | awk '{print $2}'))
  done
}

start_tproxy() {
  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ip -6 rule add fwmark ${id} table ${id} pref ${id}
    ip -6 route add local default dev lo table ${id}
  else
    ip rule add fwmark ${id} table ${id} pref ${id}
    ip route add local default dev lo table ${id}
  fi

  ${iptables} -t mangle -N BOX_EXTERNAL
  ${iptables} -t mangle -F BOX_EXTERNAL

  # Bypass sing-box itself
  ${iptables} -t mangle -A BOX_EXTERNAL -m mark --mark ${routing_mark} -j RETURN

  # Bypass intranet
  # ${iptables} -t mangle -A BOX_EXTERNAL -m addrtype --dst-type LOCAL -j RETURN
  # Run `su -c 'zcat /proc/config.gz | grep -i addrtype'` to check compatibility
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      for subnet6 in ${intranet6[@]} ; do
        ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet6} ! -p udp -j RETURN
      done
    else
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} ! -p udp -j RETURN
      done
    fi

  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}

  # Allow ap interface
  # Notice: Old android device may only have one wlan interface.
  # Some new android device have multiple wlan interface like wlan0(for internet), wlan1(for AP).
  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[@]} ; do
      ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
      ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${id}
    done
    log Info "${ap_list[*]} transparent proxy."
  fi

  ${iptables} -t mangle -I PREROUTING -j BOX_EXTERNAL


  ${iptables} -t mangle -N BOX_LOCAL
  ${iptables} -t mangle -F BOX_LOCAL

  # Bypass ignored interfaces
  if [ "${ignore_out_list}" != "" ] ; then
    for ignore in ${ignore_out_list[@]} ; do
      ${iptables} -t mangle -I BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} ignore transparent proxy."
  fi

  # Bypass intranet
  # ${iptables} -t mangle -A BOX_LOCAL -m addrtype --dst-type LOCAL -j RETURN
    if [ "${iptables}" = "ip6tables -w 100" ] ; then
      for subnet6 in ${intranet6[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -d ${subnet6} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A BOX_LOCAL -d ${subnet6} ! -p udp -j RETURN
      done
    else
      for subnet in ${intranet[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
        ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} ! -p udp -j RETURN
      done
    fi

  # Bypass sing-box itself
  # ${iptables} -t mangle -I BOX_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN
  ${iptables} -t mangle -I BOX_LOCAL -m mark --mark ${routing_mark} -j RETURN

  if [ "${proxy_mode}" = "blacklist" ] ; then
    if [ "${uid_list}" = "" ] ; then
      # Route Everything
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${id}
      log Info "transparent proxy for all apps."
    else
      # Bypass apps
      for appid in ${uid_list[@]} ; do
        ${iptables} -t mangle -I BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      # Allow !app
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} no transparent proxy."
    fi
  elif [ "${proxy_mode}" = "whitelist" ] ; then
    # Route apps to Box
    for appid in ${uid_list[@]} ; do
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-mark ${id}
    done
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-mark ${id}
    ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-mark ${id}
    # Route dnsmasq to sing-box
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
    ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-mark ${id}
    # Route DNS request to sing-box
    ${iptables} -t mangle -A BOX_LOCAL -p udp --dport 53 -j MARK --set-mark ${id}
    log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} transparent proxy."
  else
    log Warn "proxy mode: ${proxy_mode} error."
    # Route Everything
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-mark ${id}
    ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-mark ${id}
    log Info "transparent proxy for all apps."
  fi

  ${iptables} -t mangle -I OUTPUT -j BOX_LOCAL


  ${iptables} -t mangle -N DIVERT
  ${iptables} -t mangle -F DIVERT

  ${iptables} -t mangle -A DIVERT -j MARK --set-mark ${id}
  ${iptables} -t mangle -A DIVERT -j ACCEPT

  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

  # Fix ICMP (ping), this does not guarantee that the ping result is valid (proxies such as clash do not support forwarding ICMP), 
  # just that it returns a result, "--to-destination" can be set to a reachable address.
  # android ip6tablses no nat table
  if [ "${iptables}" = "iptables -w 100" ] ; then
    ${iptables} -t nat -I OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -I PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi
}

stop_tproxy() {
  if [ "${iptables}" = "ip6tables -w 100" ] ; then
    ip -6 rule del fwmark ${id} table ${id}
    ip -6 route flush table ${id}
  else
    ip rule del fwmark ${id} table ${id}
    ip route flush table ${id}
  fi

  ${iptables} -t mangle -D PREROUTING -j BOX_EXTERNAL
    
  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT

  ${iptables} -t mangle -D OUTPUT -j BOX_LOCAL

  ${iptables} -t mangle -F BOX_EXTERNAL
  ${iptables} -t mangle -X BOX_EXTERNAL

  ${iptables} -t mangle -F BOX_LOCAL
  ${iptables} -t mangle -X BOX_LOCAL

  ${iptables} -t mangle -F DIVERT
  ${iptables} -t mangle -X DIVERT

  # android ip6tablses no nat table
  if [ "${iptables}" = "iptables -w 100" ] ; then
    ${iptables} -t nat -D OUTPUT -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
    ${iptables} -t nat -D PREROUTING -d ${fake_ip_range} -p icmp -j DNAT --to-destination 127.0.0.1
  fi
}

disable_ipv6() {
  echo 0 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}

enable_ipv6() {
  echo 1 > /proc/sys/net/ipv6/conf/all/accept_ra
  echo 1 > /proc/sys/net/ipv6/conf/wlan0/accept_ra
  echo 0 > /proc/sys/net/ipv6/conf/all/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/default/disable_ipv6
  echo 0 > /proc/sys/net/ipv6/conf/wlan0/disable_ipv6
}

getAuth(){
  awk '/authorizationKey/{print $2}' /data/adb/sfm/src/config.hjson
}

request(){
  if [[ -n "${2}" ]]; then
    auth="${2}"
  else
    auth=$(getAuth)
  fi
  curl "127.0.0.1:23333/api/kernel" -H "authorization: ${auth}" -H "Content-Type: application/json" -d '{"method":"'${1}'"}' 2>/dev/null
}

display_bin_status() {
  if bin_pid=$(busybox pidof ${bin_name}) ; then
    if [[ "${lang}" == "zh_CN" ]]; then
      log Info "${bin_name} 已以 $(stat -c %U:%G /proc/${bin_pid}) 用户组启动"
      log Info "${bin_name} 服务正在运行（ PID: ${bin_pid} ）"
      log Info "${bin_name} 内存占用: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
      log Info "${bin_name} CPU 占用: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2> /dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')"
      log Info "${bin_name} 运行时长: $(busybox ps -o comm,etime | grep ${bin_name} | awk '{print $2}')"
    else
      log Info "${bin_name} has started with the $(stat -c %U:%G /proc/${bin_pid}) user group."
      log Info "${bin_name} service is running. ( PID: ${bin_pid} )"
      log Info "${bin_name} memory usage: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
      log Info "${bin_name} cpu usage: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2> /dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')"
      log Info "${bin_name} running time: $(busybox ps -o comm,etime | grep ${bin_name} | awk '{print $2}')"
    fi
    return 0
  else
    if [[ "${lang}" == "zh_CN" ]]; then
      log Warn "${bin_name} 服务已停止"
    else
      log Warn "${bin_name} service is stopped."
    fi
    return 1
  fi
}

singBox_status(){
  display_bin_status
  if [[ "$?" == 0 && -n "$(command -v jq)" && -n "$(command -v xargs)" ]]; then
    kernel=$(curl "127.0.0.1:23333/api/kernel" -H "authorization: $(getAuth)" -H "Content-Type: application/json" 2>/dev/null)
    if [[ -n "${kernel}" ]]; then
      if [[ "${lang}" == "zh_CN" ]]; then
        log Info "${bin_name} 热点模式$(if [[ "$(echo "${kernel}" | jq -r .apMode)" == "true" ]]; then echo "已开启"; else echo "已关闭"; fi)"
        log Info "${bin_name} 工作模式为 $(echo "${kernel}" | jq -r .workMode)"
      else
        log Info "${bin_name} service apMode: $(if [[ "$(echo "${kernel}" | jq -r .apMode)" == "true" ]]; then echo enable; else echo disable; fi)"
        log Info "${bin_name} service workMode: $(echo "${kernel}" | jq -r .workMode)"
      fi
    fi
  fi
}

start_singBox(){
  res=$(request start)
  case $res in
    好了*)
      [ "${lang}" == "zh_CN" ] && log Info "${bin_name} 服务已启动" || log Info "${bin_name} service started.";;
    八音盒已经在唱了*)
      log Warn "${bin_name} is already started, do not repeat.";;
    *)
      log Error "${res}";;
  esac
}

stop_singBox(){
  if display_bin_status; then
    res=$(request stop)
    case $res in
      好了*)
        [ "${lang}" == "zh_CN" ] && log Warn "${bin_name} 服务已停止" || log Warn "${bin_name} service stopped.";;
      八音盒已经不唱了*)
        log Warn "${bin_name} is already stopped, do not repeat.";;
      *)
        log Error "${res}";;
    esac
  fi
}

enable_tproxy(){
  find_packages_uid
  intranet[${#intranet[@]}]=$(ip address | grep -w inet | grep -v 127 | awk '{print $2}')
  log Info "use TPROXY."
  log Info "creating ip(6)tables transparent proxy rules."
  iptables="iptables -w 100"
  start_tproxy && log Info "create iptables transparent proxy rules done." || (log Error "create iptables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
  if [ "${ipv6}" = "enable" ] ; then
    log Debug "use IPv6."
    enable_ipv6
    iptables="ip6tables -w 100"
    intranet6[${#intranet6[@]}]=$(ip address | grep -w inet6 | grep -v ::1 | grep -v fe80 | awk '{print $2}')
    start_tproxy && log Info "create ip6tables transparent proxy rules done." || (log Error "create ip6tables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
  else
    disable_ipv6
    log Warn "disable IPv6."
  fi
}

disable_tproxy(){
  log Warn "cleaning up ip(6)tables transparent proxy rules."
  iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
  iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
  log Warn "clean up ip(6)tables transparent proxy rules done."
  enable_ipv6
  log Warn "enable IPv6."
  return 0
}

renew_tproxy(){
  log Warn "cleaning up ip(6)tables transparent proxy rules."
  iptables="iptables -w 100" && stop_tproxy >> /dev/null 2>&1
  iptables="ip6tables -w 100" && stop_tproxy >> /dev/null 2>&1
  log Warn "clean up ip(6)tables transparent proxy rules done."
  enable_ipv6
  log Warn "enable IPv6."
  sleep 3
  
  find_packages_uid
  intranet[${#intranet[@]}]=$(ip address | grep -w inet | grep -v 127 | awk '{print $2}')
  log Info "use TPROXY."
  log Info "creating ip(6)tables transparent proxy rules."
  iptables="iptables -w 100"
  start_tproxy && log Info "create iptables transparent proxy rules done." || (log Error "create iptables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
  if [ "${ipv6}" = "enable" ] ; then
    log Debug "use IPv6."
    enable_ipv6
    iptables="ip6tables -w 100"
    intranet6[${#intranet6[@]}]=$(ip address | grep -w inet6 | grep -v ::1 | grep -v fe80 | awk '{print $2}')
    start_tproxy && log Info "create ip6tables transparent proxy rules done." || (log Error "create ip6tables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
  else
    disable_ipv6
    log Warn "disable IPv6."
  fi
}

help_text(){
  if [[ -n "$1" ]]; then
    if [[ "${lang}" == "zh_CN" ]]; then
            echo 'Usage: '${0}' OPTIONS
       KEY=VALUE '${0}' OPTIONS
       KEY1=VALUE1 KEY2=VALUE2 '${0}' OPTIONS

OPTIONS:
\thelp\t\t显示帮助文本
\tstart\t\t启动 '${bin_name}' 服务
\tstop\t\t停止 '${bin_name}' 服务
\trestart\t\t重启 '${bin_name}' 服务
\tstatus\t\t显示 '${bin_name}' 服务状态
\tenable\t\t启用 tproxy
\tdisable\t\t禁用 tproxy
\trenew\t\t更新 tproxy

KEYS(键)\tVALUES(值)\tDEFAULT(默认值)
lang\t\tzh_CN,en_US\ten_US
ipv6\t\tenable,disable\tdisable
bin_name\t\t\tsingBox
'
    else
      echo 'Usage: '${0}' OPTIONS
       KEY=VALUE '${0}' OPTIONS

OPTIONS:
\thelp\t\tshow help text.
\tstart\t\tstart '${bin_name}' service.
\tstop\t\tstop '${bin_name}' service.
\trestart\t\trestart '${bin_name}' service.
\tstatus\t\tview the status of '${bin_name}'
\tenable\t\tenable tproxy
\tdisable\t\tdisable tproxy
\trenew\t\trenew tproxy

KEYS\t\tVALUES\t\tDEFAULT
lang\t\tzh_CN,en_US\ten_US
ipv6\t\tenable,disable\tdisable
bin_name\t\t\tsingBox
'
    fi
  else
    log Error "${0} Usage: ${0} {help|start|stop|restart|status|enable|disable|renew}"
  fi
}

case $1 in
  status)
    singBox_status
    # display_bin_status
    ;;
  start)
    display_bin_status || start_singBox
    ;;
  stop)
    stop_singBox
    ;;
  restart)
    stop_singBox
    sleep 2
    start_singBox
    ;;
  enable | enable_tproxy)
    enable_tproxy
    ;;
  disable | disable_tproxy)
    disable_tproxy
    ;;
  renew_tproxy)
    renew_tproxy
    ;;
  help)
    help_text info
    ;;
  install)
    if [[ ! -x "/data/adb/sfm/controller" ]]; then
      cp "${0}" /data/adb/sfm/controller
      chmod 755 /data/adb/sfm/controller
    fi
    ;;
  *)
    help_text
    ;;
esac
